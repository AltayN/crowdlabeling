<link rel="stylesheet" type="text/css" href="/styles/room.css">

<div class="container">
  <h1>CrowdLabeling</h1>

  <h3>A collaborative app for image labeling</h3>

  <p>Room number : <%= room %></p>
  
  <div class="row" style="height: 500px;">
    
    <div class="col-md-8" style="height: 100%;">

      <h3>Image : <%= image_path %></h3>
      
      <div id="image">
        <div id="overlay" style="display: none;"> </div>
        
        <div id="progress_confirm" style="display: none;">
          <div style="margin-top: 90px;">
            <p id="tag_label">Tag "label" is being processed.</p>
            <p>Please wait for all confirmations</p>
            <div class="progress" style="margin-top: 10px;">
              <div id="progress_bar" class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
                <span class="sr-only">60% Complete</span>
              </div>
            </div>
          </div>
          
        </div>

        <canvas id="canvas" width=300 height=300></canvas>
      </div>

      <h3>List of tags :</h3>
      <ul id="tag_list">
      </ul>
      
    </div>

    <div class="col-md-4" style="height: 100%;">
      
      <h3>Chat</h3>

      <ol id="chat_text"></ol>
      
      <div class="input-group">
        <input id="chat_input" type="text" class="form-control" name="message" autocomplete="off">
        <span class="input-group-btn">
          <button id="chat_button" class="btn btn-default" type="button">Send</button>
        </span>
      </div>

    </div>

  </div>

</div>


<!-- Scripts -->
<script src="/socket.io/socket.io.js"></script>
<script>

  // Init socket.io
  var socket = io.connect('<%= base_path %>');

  socket.emit('join_room', '<%= room %>');

  var button = document.getElementById('chat_button');
  var input = document.getElementById('chat_input');
  var tagList = document.getElementById('tag_list');

  var allTags = {};

  // Add listener to the button to send messages
  button.onclick = function(){
      var message = input.value;

      if (message !== '') {
        socket.emit('chat_message', message);
        var new_message = document.createElement('li');
        new_message.className = 'self';
        new_message.innerHTML = createMessageDiv(message);
        var chatText = document.getElementById('chat_text');
        chatText.appendChild(new_message);
        chatText.scrollTop = chatText.scrollHeight;
        document.getElementById('chat_input').value = '';
        console.log('Chat message sent : ' + input.value);
      }
  };
  // Detect when user press Enter inside the chat input
  document.getElementById('chat_input').onkeypress = function(e){
    if (!e) e = window.event;
    var keyCode = e.keyCode || e.which;
    if (keyCode == '13'){
      // Enter pressed
      document.getElementById('chat_button').click();
      return false;
    }
  };

  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');

  var img = new Image();
  img.src = '<%= base_path + image_path %>';
  console.log('<%= base_path + image_path %>');
  img.onload = function(){
      context.drawImage(img, 0, 0);
  };

  canvas.addEventListener('mousedown', function(event){
      var mousePos = getMousePos(canvas, event);

      bootbox.prompt('Which tag do you want to add ?', function(tag) {                
        if (tag !== null) {
          var data = {
            label: tag,
            position: mousePos
          };
          showProgressConfirm();
          socket.emit('tag_intent', data);
        }
      });
  });

  // Add messages from server to the chat div
  socket.on('chat_message', function(message) {
      console.log('Chat message received : ' + message);
      var new_message = document.createElement('li');
      new_message.className = 'other';
      new_message.innerHTML = createMessageDiv(message);
      document.getElementById('chat_text').appendChild(new_message);
  });

  // Inform when another user enters the room
  socket.on('user_enter', function(message) {
      console.log('Chat message received : ' + message);
      var new_message = document.createElement('li');
      new_message.className = 'info';
      new_message.innerHTML = '<div>- ' + message + ' -</div>';
      document.getElementById('chat_text').appendChild(new_message);
  });

  // receive new tags from other clients
  socket.on('tag_intent', function(tag) {
      console.log('New tag intent : ' + tag.label);
      bootbox.confirm('User wants to insert the tag: ' + tag.label, function (confirmation) {
        if (confirmation) {
          socket.emit('tag_confirm', tag);
          showProgressConfirm();
        } else {
          socket.emit('tag_cancel', tag);
        }
      });
      
  });
  
  socket.on('tag_confirm', function(data) {
      updateProgressConfirm(data.tag.label, data.nConfirms, data.nClients);
  });

  socket.on('tag_cancel', function(tag) {
      console.log('Tag cancel : ' + tag.label);
      bootbox.hideAll();
      hideProgressConfirm();
  });

  socket.on('tag_creation', function(tag) {
      console.log('Tag creation : ' + tag.label);
      insertTag(context, tag);
      hideProgressConfirm();
  });

  socket.on('tag_delete', function(tag) {
      console.log('Deleting tag : ' + tag);
      removeTag(tag);
  });

  // Declaration of auxiliary functions

  function createMessageDiv(message) {
    var date = new Date();
    return '<div class="avatar"></div><div class="message"><p>' + message + '</p><time datetime="' + date.toISOString() + '">' + date.toLocaleString() + '</time></div>';
  }

  function getMousePos(canvas, event){
      var rect = canvas.getBoundingClientRect();
      return {
          x: event.clientX - rect.left,
          y: event.clientY - rect.top
      };
  }

  function insertTag(context, tag) {
      // TODO : we should make sure that two tags never overlap, some nasty display bugs could appear otherwise
      context.lineWidth = 1;
      context.fillStyle = "#CC00FF";
      context.lineStyle = "#ffff00";
      var fontSize = 18;
      context.font = fontSize + "px" + " " + "serif";
      var measures = { width: context.measureText(tag.label).width, height: fontSize , x: tag.position.x, y: tag.position.y - fontSize}; 
      allTags[tag.label] = { measures: measures, imageData: context.getImageData(measures.x , measures.y, measures.width, measures.height) };
      
      var newTag = document.createElement('li');
      newTag.id = 'tag_' + tag.label;
      newTag.innerHTML = tag.label;
      tagList.appendChild(newTag);
      
      newTag.onclick = function() {
          socket.emit('tag_delete', this.innerHTML);
          removeTag(this.innerHTML);
      };
      
      context.fillText(tag.label, tag.position.x, tag.position.y);
  }

  function removeTag(label) {
     var canvas = document.getElementById('canvas');
     var context = canvas.getContext('2d');
     var tag = allTags[label];
     context.clearRect(tag.measures.x, tag.measures.y, tag.measures.width, tag.measures.height);
     context.putImageData(tag.imageData, tag.measures.x, tag.measures.y);
     document.getElementById('tag_' + label).remove();
     delete allTags[label];
  }

  function hideProgressConfirm() {
      document.getElementById('overlay').style.display = 'none';
      document.getElementById('progress_confirm').style.display = 'none';
      updateProgressConfirm('label', 0, 1); // reset : put dummy data in the progress bar
  }

  function showProgressConfirm() {
      document.getElementById('overlay').style.display = 'block';
      document.getElementById('progress_confirm').style.display = 'block';
  }

  function updateProgressConfirm(tag, nbOfConfirms, nbOfClients) {
    var progress = (nbOfConfirms/nbOfClients) * 100;
    document.getElementById('progress_bar').style.width = progress + '%';
    document.getElementById('tag_label').innerHTML = 'Tag "' + tag + '" is being processed.';
  }

</script>
