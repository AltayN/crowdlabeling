<link rel="stylesheet" type="text/css" href="/styles/room.css">

<h4>A web application for labeling images together !</h4>

<p>You are in the room : <%= room %> (share this <a href="/room/<%= room %>/<%= image %>">link</a> with others)</p>

<div class="row" >
  
  <div class="col-md-8" style="height: 500px;">

    <h3>Image : <%= image_path %></h3>
    
    <div id="image" style="max-width: 80%; max-height: 100%; overflow: scroll;">
      <!-- <div id="overlay" style="display: none;"> </div>
      
      <div id="progress_confirm" style="display: none;">
        <div style="margin-top: 90px;">
          <p id="tag_label">Tag "label" is being processed.</p>
          <p>Please wait for all confirmations</p>
          <div class="progress" style="margin-top: 10px;">
            <div id="progress_bar" class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
              <span class="sr-only">60% Complete</span>
            </div>
          </div>
        </div>
        
      </div> -->

      <canvas id="canvas" height=400 width=400></canvas>
    </div>

    
    
  </div>

  <div class="col-md-4" style="height: 500px;">
    
    <h3>Chat</h3>

    <ol id="chat_text"></ol>
    
    <div class="input-group">
      <input id="chat_input" type="text" class="form-control" name="message" autocomplete="off">
      <span class="input-group-btn">
        <button id="chat_button" class="btn btn-default" type="button">Send</button>
      </span>
    </div>

  </div>

  

</div>  

<div class="row">
  <div class="col-md-12">
    <h3>List of tags</h3>
    <ul id="tag_list" style="list-style-type: none; padding: 0 0 0 0">
    </ul>
  </div>
</div>

<div class="notification"> </div>

<!-- Scripts -->
<script src="/socket.io/socket.io.js"></script>
<script>

  // Init socket.io
  var socket = io.connect('<%= base_path %>');

  socket.emit('join_room', '<%= room %>');

  var button = document.getElementById('chat_button');
  var input = document.getElementById('chat_input');
  var tagList = document.getElementById('tag_list');

  var allTags = {};

  // Add listener to the button to send messages
  button.onclick = function(){
      var message = input.value;

      if (message !== '') {
        socket.emit('chat_message', message);
        var new_message = document.createElement('li');
        new_message.className = 'self';
        new_message.innerHTML = createMessageDiv(message);
        var chatText = document.getElementById('chat_text');
        chatText.appendChild(new_message);
        chatText.scrollTop = chatText.scrollHeight;
        document.getElementById('chat_input').value = '';
        console.log('Chat message sent : ' + input.value);
      }
  };
  // Detect when user press Enter inside the chat input
  document.getElementById('chat_input').onkeypress = function(e){
    if (!e) e = window.event;
    var keyCode = e.keyCode || e.which;
    if (keyCode == '13'){
      // Enter pressed
      document.getElementById('chat_button').click();
      return false;
    }
  };

  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');

  var img = new Image();
  img.src = '<%= base_path + image_path %>'
  console.log('<%= base_path + image_path %>');
  canvas.height = img.height;
  canvas.width = img.width;
  document.getElementById('image').height = img.height;
  document.getElementById('image').width = img.width;
  img.onload = function(){
      context.drawImage(img, 0, 0);
  };

  canvas.addEventListener('mousedown', function(event){
      var mousePos = getMousePos(canvas, event);

      bootbox.prompt('Which tag do you want to add ?', function(tag) {                
        if (tag !== null) {
          var data = {
            label: tag,
            position: mousePos
          };
          socket.emit('tag_intent', data);
        }
      });
  });

  // Add messages from server to the chat div
  socket.on('chat_message', function(message) {
      console.log('Chat message received : ' + message);
      var new_message = document.createElement('li');
      new_message.className = 'other';
      new_message.innerHTML = createMessageDiv(message);
      document.getElementById('chat_text').appendChild(new_message);
  });

  // Inform when another user enters the room
  socket.on('chat_event', function(message) {
      console.log('Chat event received : ' + message);
      var new_message = document.createElement('li');
      new_message.className = 'info';
      new_message.innerHTML = '<div>- ' + message + ' -</div>';
      document.getElementById('chat_text').appendChild(new_message);
  });

  // receive new tags from other clients
  socket.on('tag_intent', function(tag) {
      console.log('New tag intent : ' + tag.label);
      
      var newTag = document.createElement('li');
      newTag.id = 'tag_' + tag.id;
      newTag.innerHTML = createTagInList(tag);
      tagList.appendChild(newTag);
      
      pinAlert('info', 'Tag "'+tag.label+'" waiting.', tag.id);
  });
  // receive tag intent from itself : used to get the tag id from the server basically
  socket.on('tag_intent_self', function(tag) {
      console.log('self');
      var newTag = document.createElement('li');
      newTag.id = 'tag_' + tag.id;
      newTag.innerHTML = createTagInListSelf(tag);
      tagList.appendChild(newTag);
  });
  
  socket.on('tag_confirm', function(data) {
      var progress = (data.tag.numberOfConfirmations/data.numberOfClients) * 100;
      $('#tag_' + data.tag.id + ' div#progress_bar').css('width', progress + '%');
      // updateProgressConfirm(data.tag, data.numberOfClients);
  });

  socket.on('tag_creation', function(tag) {
      console.log('Tag creation : ' + tag.label);
      $('#tag_' + tag.id + ' .progress').remove();
      insertTag(context, tag);

      pinAlert('success', 'Tag "'+tag.label+'" created!', tag.id);
  });

  socket.on('tag_delete', function(tag) {
      console.log('Tag delete : ' + tag.label);
      $('#tag_' + tag.id).remove();
      removeTag(tag.id);

      pinAlert('danger', 'Tag "'+tag.label+'" deleted!', tag.id);
  });

  // Declaration of auxiliary functions

  function createMessageDiv(message) {
    var date = new Date();
    return '<div class="avatar"></div><div class="message"><p>' + message + '</p><time datetime="' + date.toISOString() + '">' + date.toLocaleString() + '</time></div>';
  }

  function createTagInList(tag) {
    return  '<div class="well" style="padding: 10px;">' +
              '<button type="button" class="close" style="color:#e74c3c" onClick="sendRemoveTag(\''+tag.id+'\');" aria-label="Close">' +
                '<span class="glyphicon glyphicon-remove"></span>' +
              '</button>' +
              '<button type="button" class="close" style="color:rgb(24, 188, 156)" onClick="sendConfirmTag(\''+tag.id+'\', \''+tag.label+'\');" aria-label="Close">' +
                '<span class="glyphicon glyphicon-ok"></span>' +
              '</button>' +
              '<div>'+tag.label+'</div>' +
              '<div class="progress" style="background-color: white; margin-bottom: 0px; margin-top: 8px;">' +
                '<div id="progress_bar" class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">' +
                  '<span class="sr-only">60% Complete</span>' +
                '</div>' +
              '</div>' +
            '</div>';
  }

  function createTagInListSelf(tag) {
    return  '<div class="well" style="padding: 10px;">' +
              '<button type="button" class="close" style="color:#e74c3c" onClick="sendRemoveTag(\''+tag.id+'\');" aria-label="Close">' +
                '<span class="glyphicon glyphicon-remove"></span>' +
              '</button>' +
              '<div>'+tag.label+'</div>' +
              '<div class="progress" style="background-color: white; margin-bottom: 0px; margin-top: 8px;">' +
                '<div id="progress_bar" class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">' +
                  '<span class="sr-only">60% Complete</span>' +
                '</div>' +
              '</div>' +
            '</div>';
  }

  function sendRemoveTag(id) {
      socket.emit('tag_delete', id);
      // remove alerts related to this tag
      $('#tag_' + id + '_alert').remove();
  }

  function sendConfirmTag(id, label) {
      socket.emit('tag_confirm', id);
      $('#tag_' + id + ' button').remove();
      $('#tag_' + id + ' div.well').prepend('<button type="button" class="close" style="color:#e74c3c" onClick="sendRemoveTag(\''+id+'\');" aria-label="Close"><span class="glyphicon glyphicon-remove"></span></button>');
      // remove alerts related to this tag
      $('#tag_' + id + '_alert').remove();
  }

  function getMousePos(canvas, event){
      var rect = canvas.getBoundingClientRect();
      return {
          x: event.clientX - rect.left,
          y: event.clientY - rect.top
      };
  }

  function insertTag(context, tag) {
      // TODO : we should make sure that two tags never overlap, some nasty display bugs could appear otherwise
      context.lineWidth = 1;
      context.fillStyle = "#CC00FF";
      context.lineStyle = "#ffff00";
      var fontSize = 18;
      context.font = fontSize + "px" + " " + "serif";
      var measures = { width: context.measureText(tag.label).width, height: fontSize , x: tag.position.x, y: tag.position.y - fontSize}; 
      allTags[tag.id] = { measures: measures, imageData: context.getImageData(measures.x , measures.y, measures.width, measures.height) };
      context.fillText(tag.label, tag.position.x, tag.position.y);
  }

  function removeTag(id) {
      if (allTags[id]) {
          var canvas = document.getElementById('canvas');
          var context = canvas.getContext('2d');
          var tag = allTags[id];
          context.clearRect(tag.measures.x, tag.measures.y, tag.measures.width, tag.measures.height);
          context.putImageData(tag.imageData, tag.measures.x, tag.measures.y);
          delete allTags[id];
      }
  }

  function hideProgressConfirm() {
      document.getElementById('overlay').style.display = 'none';
      document.getElementById('progress_confirm').style.display = 'none';
      updateProgressConfirm('label', 0, 1); // reset : put dummy data in the progress bar
  }

  function showProgressConfirm() {
      document.getElementById('overlay').style.display = 'block';
      document.getElementById('progress_confirm').style.display = 'block';
  }

  function updateProgressConfirm(tag, numberOfClients) {
    console.log(tag);
    console.log(numberOfClients);

    // var progress = (nbOfConfirms/nbOfClients) * 100;
    // document.getElementById('progress_bar').style.width = progress + '%';
    // document.getElementById('tag_label').innerHTML = 'Tag "' + tag + '" is being processed.';
  }

  function pinAlert(type, message, tagId) {

    var alertId = 'tag_' + tagId + '_alert';

    var alert = '<div id="'+alertId+'" class="alert alert-'+type+' fade in"><a href="#" class="close" data-dismiss="alert">&times;</a><div>'+message+'</div></div>';
    
    $('.notification').append(alert);
    if (type === 'info') {
      $('#'+alertId+' div').css('cursor', 'pointer');
      $('#'+alertId+' div').click(function (){
        console.log('#tag_'+tagId);
          $('html, body').animate({
              scrollTop: ($('#tag_'+tagId).offset().top)
          },500);
      });
    }
  }

</script>
